import java.util.*;

public class SocialNetwork {
    private Map<Integer, String> users; // Stores user IDs and their names
    private Map<Integer, List<Integer>> friendships; // Adjacency list for user friendships

    public SocialNetwork() {
        users = new HashMap<>();
        friendships = new HashMap<>();
    }

    // Add a new user to the network
    public void addUser(int userId, String name) {
        users.put(userId, name);
        friendships.putIfAbsent(userId, new LinkedList<>()); // Replaced ArrayList with LinkedList
    }

    // Add a friendship connection between two users
    public void addFriendship(int user1, int user2) {
        friendships.get(user1).add(user2);
        friendships.get(user2).add(user1);
    }

    // Find mutual friends for a given user
    private Set<Integer> findMutualFriends(int user1, int user2) {
        Set<Integer> mutualFriends = new HashSet<>(friendships.get(user1));
        mutualFriends.retainAll(friendships.get(user2));
        return mutualFriends;
    }

    // Recommend friends for a user based on mutual connections
    public List<int[]> recommendFriends(int userId) {
        List<int[]> recommendations = new LinkedList<>(); // Using LinkedList for recommendations
        Set<Integer> userFriends = new HashSet<>(friendships.get(userId));

        for (Integer friend : userFriends) {
            for (Integer potentialFriend : friendships.get(friend)) {
                if (potentialFriend != userId && !userFriends.contains(potentialFriend)) {
                    Set<Integer> mutualFriends = findMutualFriends(userId, potentialFriend);
                    if (!mutualFriends.isEmpty()) {
                        recommendations.add(new int[] {potentialFriend, mutualFriends.size()});
                    }
                }
            }
        }

        // Sort recommendations by the number of mutual friends (descending order)
        recommendations.sort((a, b) -> Integer.compare(b[1], a[1]));
        return recommendations;
    }

    // Display all users
    public void displayUsers() {
        System.out.println("Users:");
        for (var entry : users.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

    // Display all friendships
    public void displayFriendships() {
        System.out.println("Friendships:");
        for (var entry : friendships.entrySet()) {
            for (Integer friend : entry.getValue()) {
                if (entry.getKey() < friend) { // Avoid duplicate pairs
                    System.out.println(entry.getKey() + " - " + friend);
                }
            }
        }
    }

    // Display friend recommendations for a user
    public void displayRecommendations(int userId) {
        System.out.println("Friend Recommendations for User " + userId + " (" + users.get(userId) + "): ");
        List<int[]> recommendations = recommendFriends(userId);

        // Format the output
        List<String> formattedRecommendations = new LinkedList<>();
        for (int[] recommendation : recommendations) {
            int recommendedUserId = recommendation[0];
            int mutualFriendsCount = recommendation[1];
            String recommendedUserName = users.get(recommendedUserId);
            formattedRecommendations.add("(" + recommendedUserName + ", " + mutualFriendsCount + " mutual friends)");
        }

        System.out.println(formattedRecommendations);
    }


    public static void main(String[] args) {
        SocialNetwork network = new SocialNetwork();

        // Adding users
        network.addUser(1, "Surhan");
        network.addUser(2, "Usama");
        network.addUser(3, "Zaid");
        network.addUser(4, "Desmond");
        network.addUser(5, "Bilal");

        // Adding friendships
        network.addFriendship(1, 2);
        network.addFriendship(1, 3);
        network.addFriendship(4, 3);
        network.addFriendship(4, 1);
        network.addFriendship(5, 1);

        // Display users, friendships, and recommendations
        network.displayUsers();
        network.displayFriendships();
        network.displayRecommendations(2); // Display recommendations for user 2
    }
}
